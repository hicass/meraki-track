{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file:///Users/cass/code/meraki-track/frontend/frontend/src/utils/supabase/client.ts"],"sourcesContent":["import { createBrowserClient } from \"@supabase/ssr\";\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\nconst supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\n\n// If the variables are missing throw an error\nif (!supabaseUrl || !supabaseKey) {\n  throw new Error(\"Missing Supabase environment variables\");\n}\n\nconst supabaseClient = createBrowserClient(supabaseUrl, supabaseKey);\n\nexport default supabaseClient;\n"],"names":[],"mappings":";;;AAAA;AAAA;;AAEA,MAAM;AACN,MAAM;AAEN,8CAA8C;AAC9C,uCAAkC;;AAElC;AAEA,MAAM,iBAAiB,CAAA,GAAA,0KAAA,CAAA,sBAAmB,AAAD,EAAE,aAAa;uCAEzC"}},
    {"offset": {"line": 77, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 83, "column": 0}, "map": {"version":3,"sources":["file:///Users/cass/code/meraki-track/frontend/frontend/src/context/AuthContext.tsx"],"sourcesContent":["'use client';\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport supabase from '@/utils/supabase/client';\nimport { Session } from '@supabase/supabase-js';\n\n// Create context\ninterface AuthContextType {\n  session: Session | null;\n  setSession: React.Dispatch<React.SetStateAction<Session | null>>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\n// Custom hook to use the Auth context\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\n// Provider component to wrap around your app\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({\n  children,\n}) => {\n  const [session, setSession] = useState<Session | null>(null);\n\n  useEffect(() => {\n    const getSession = async () => {\n      const {\n        data: { session },\n      } = await supabase.auth.getSession();\n      setSession(session);\n    };\n    getSession();\n\n    const { data: authListener } = supabase.auth.onAuthStateChange(\n      (_event, newSession) => {\n        setSession(newSession);\n      }\n    );\n\n    return () => {\n      authListener.subscription.unsubscribe();\n    };\n  }, []);\n\n  // Returning the children wrapped in the AuthContext.Provider\n  return (\n    <AuthContext.Provider value={{ session, setSession }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"names":[],"mappings":";;;;;AACA;AACA;AAFA;;;;AAWA,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,gBAAa,AAAD,EAA+B;AAGxD,MAAM,UAAU;IACrB,MAAM,UAAU,CAAA,GAAA,qMAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,CAAC,SAAS;QACZ,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT;AAGO,MAAM,eAAwD,CAAC,EACpE,QAAQ,EACT;IACC,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAkB;IAEvD,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,aAAa;YACjB,MAAM,EACJ,MAAM,EAAE,OAAO,EAAE,EAClB,GAAG,MAAM,8IAAA,CAAA,UAAQ,CAAC,IAAI,CAAC,UAAU;YAClC,WAAW;QACb;QACA;QAEA,MAAM,EAAE,MAAM,YAAY,EAAE,GAAG,8IAAA,CAAA,UAAQ,CAAC,IAAI,CAAC,iBAAiB,CAC5D,CAAC,QAAQ;YACP,WAAW;QACb;QAGF,OAAO;YACL,aAAa,YAAY,CAAC,WAAW;QACvC;IACF,GAAG,EAAE;IAEL,6DAA6D;IAC7D,qBACE,8OAAC,YAAY,QAAQ;QAAC,OAAO;YAAE;YAAS;QAAW;kBAChD;;;;;;AAGP"}},
    {"offset": {"line": 130, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}